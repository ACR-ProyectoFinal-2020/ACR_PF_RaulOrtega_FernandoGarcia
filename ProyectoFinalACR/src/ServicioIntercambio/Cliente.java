/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ServicioIntercambio;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Fernando Garc√≠a
 */
public final class Cliente extends javax.swing.JFrame implements ActionListener {

    private Interfaz interfaz;
    private boolean con_est = false;
    private File[] files;
    private boolean usuarioEstablecido = false;
    private int usID = 0000;
    private final BaseSimulator base;

    /**
     * Creates new form Cliente
     *
     * @throws java.rmi.RemoteException
     */
    public Cliente() throws RemoteException {
        base = new BaseSimulator();
        initComponents();
        initClient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pantalla = new javax.swing.JTextArea();
        SubirArchivo = new javax.swing.JButton();
        SelectorArchivo = new javax.swing.JButton();
        visualizadorRuta = new javax.swing.JTextField();
        comandos = new javax.swing.JTextField();
        Enter = new javax.swing.JButton();
        userID = new javax.swing.JLabel();
        UserID = new javax.swing.JTextField();
        UserPass = new javax.swing.JLabel();
        UserPaswd = new javax.swing.JTextField();
        SessionIniter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pantalla.setColumns(20);
        pantalla.setRows(5);
        jScrollPane1.setViewportView(pantalla);

        SubirArchivo.setText("Subir archivo al servidor");

        SelectorArchivo.setText("Seleccionar archivo");

        visualizadorRuta.setText("jTextField1");

        comandos.setText("jTextField2");

        Enter.setText("jButton3");

        userID.setText("User ID:");

        UserID.setText("jTextField1");

        UserPass.setText("User Password:");

        UserPaswd.setText("jTextField2");

        SessionIniter.setText("Establecer sesion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comandos, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(SelectorArchivo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(visualizadorRuta)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(userID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(UserPass)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserPaswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SubirArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(Enter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SessionIniter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userID)
                    .addComponent(UserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserPass)
                    .addComponent(UserPaswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SessionIniter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comandos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Enter))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectorArchivo)
                    .addComponent(visualizadorRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubirArchivo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Cliente().setVisible(true);
            } catch (RemoteException ex) {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    public void initClient() throws RemoteException {
//        File[] archivos = this.interfaz.listarArchivos();
//        for (File archivo : archivos) {
//            if (archivo.getName().equals("audio1.mp3") || archivo.getName().equals("Imagen1.png") || archivo.getName().equals("Libro1.pdf") || archivo.getName().equals("video1.mp4")) {
//                Archivo temp = new Archivo(archivo, 1);
//                base.setterArchivo(temp.getArchivo(), temp.getPermiso());
//            }
//        }

        //botones
        SubirArchivo.addActionListener(this);
        SelectorArchivo.addActionListener(this);
        Enter.addActionListener(this);
        SessionIniter.addActionListener(this);

        SubirArchivo.setText("Subir archivo");
        SelectorArchivo.setText("Seleccionar archivo");
        Enter.setText("Enter");
        SessionIniter.setText("Establecer sesi√≥n");

        //text field
        visualizadorRuta.setText(null);
        visualizadorRuta.setEditable(false);
        comandos.setText(null);

        UserID.setText(null);
        UserID.setPreferredSize(new Dimension(100, 24));
        UserID.setEditable(true);
        UserPaswd.setText(null);
        UserPaswd.setPreferredSize(new Dimension(100, 24));
        UserPaswd.setEditable(true);

        //text area
        pantalla.setEditable(false);
        bannerInicial();

        //conexion con el servidor
        pantalla.append("\nConectando con el servidor...\n");
        try {
            interfaz = (Interfaz) Naming.lookup("//localhost:1099/servicio");
            pantalla.append("Conexion exitosa...\n");
            this.con_est = interfaz.conexion();
            pantalla.append("Ingrese el comando '/help' para recibir ayuda...\n\n");
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            pantalla.append("Imposible conectar con el servidor...\n");
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (this.usuarioEstablecido == false) {
            pantalla.append("No se ha establecido una sesi√≥n...");
        } else {
            pantalla.append("User ID#" + this.usID + "\n");
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //boton 1: Enter
        if (e.getSource() == Enter) {
            //text field vac√≠o o en blanco
            if (comandos.getText().isBlank() || comandos.getText().isEmpty()) {
                pantalla.append("\n[Error]: Ingrese un comando...\n");
            } else {
                String comando = comandos.getText();
                if (comando.equals("/help") || comando.equals("/list") || comando.contains("/down") || comando.equals("/clsc")) {
                    if (comando.equals("/help")) {
                        pantalla.append("\nComandos v√°lidos:\n");
                        pantalla.append("\t/list - listar contenido del servidor\n");
                        pantalla.append("\t/down 'nombre del archivo' - descargar archivo del servidor\n");
                        pantalla.append("\t/clsc - limpiar pantalla\n");
                    }
                    if (comando.equals("/list")) {
                        pantalla.append("\nArchivos del servidor:");

                        try {
                            File[] archivos = this.interfaz.listarArchivos();
                            for (File archivo : archivos) {
                                pantalla.append("\n\t" + archivo.getName());
                            }
                        } catch (RemoteException ex) {
                            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (comando.contains("/down")) {
                        String comando_full = comandos.getText();
                        String userInput = comando_full.substring(6);
                        pantalla.append("\n" + userInput);
                        pantalla.append("\nDescargando archivo " + userInput + " del servidor...\n");
                        try {
                            byte[] fileBytes = this.interfaz.obtenerArchivo(userInput, "Servidor/");
                            if (fileBytes != null) {
                                if (this.usuarioEstablecido == false) {
                                    createTempFile(fileBytes, userInput, "Cliente/");
                                } else {
                                    createTempFile(fileBytes, userInput, "Cliente/" + this.usID+"/");
                                }
                            }
                        } catch (RemoteException ex) {
                            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        pantalla.append("\nArchivo " + userInput + " descargado del servidor...\n");
                    }
                    if (comando.equals("/clsc")) {
                        bannerInicial();
                    }
                } else {
                    pantalla.append("\n[Error]: comando no v√°lido, ingrese '/help' para listar los comandos v√°lidos.");
                }
            }
        }
        //boton 2: SelectorArchivo
        if (e.getSource() == SelectorArchivo) {
            JFileChooser selector = new JFileChooser();

            FileNameExtensionFilter filtroIm = new FileNameExtensionFilter("Imagenes", "jpg", "jpeg", "png", "bmp");
            FileNameExtensionFilter filtroAu = new FileNameExtensionFilter("Audio", "aiff", "au", "mid", "midi", "mp3", "m4a", "mp4", "wav", "wma");
            FileNameExtensionFilter filtroVi = new FileNameExtensionFilter("Video", "asf", "avi", "mp4", "m4v", "mov", "mpg", "mpeg", "swf", "wmv");
            FileNameExtensionFilter filtroOt = new FileNameExtensionFilter("Otros", "txt", "pdf", "pptx", "docx", "rar", "zip", "jar");

            selector.addChoosableFileFilter(filtroIm);
            selector.addChoosableFileFilter(filtroAu);
            selector.addChoosableFileFilter(filtroVi);
            selector.addChoosableFileFilter(filtroOt);
            selector.setMultiSelectionEnabled(true);

            selector.showOpenDialog(this);
            try {
                files = selector.getSelectedFiles();

                String cadena = "";
                for (File file : files) {
                    cadena += "\"";
                    cadena += file.getPath() + "\"";
                }
                visualizadorRuta.setText(cadena);
            } catch (NullPointerException err) {
                System.out.println("\n[Error]: No se ha seleccionado ning√∫n fichero...\n");
            } catch (Exception err) {
                System.out.println(err.getMessage());
            }
        }
        //boton 3: SubirArchivo
        if (e.getSource() == SubirArchivo) {
            for (File file : files) {
                pantalla.append("\nSubiendo archivo " + file.getName() + " al servidor...");
                try {
                    byte[] fileBytes = this.interfaz.obtenerArchivo(file.getName(), "Cliente/");
                    if (fileBytes != null) {
                        createTempFile(fileBytes, file.getName(), "Servidor/");
                    }
                    pantalla.append("\n¬°El archivo" + file.getName() + " se ha subido con exito!");
                } catch (RemoteException ex) {
                    Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //boton 4: SessionIniter
        if (e.getSource() == SessionIniter) {
            //UserID
            //UserPaswd
            if (UserID.getText().isBlank() && UserID.getText().isEmpty() && UserPaswd.getText().isBlank() && UserPaswd.getText().isEmpty()) {
                pantalla.append("\n[Error]: datos de validacion de sesi√≥n imcompletos.");
            } else {
                User user = new User(Integer.parseInt(UserID.getText()), UserPaswd.getText());
                boolean exist = base.UserExist(user);
                if (exist == true) {
                    usID = user.getUserID();
                    this.usuarioEstablecido = true;
                    bannerInicial();
                } else {
                    pantalla.append("\nID de usuario o Password incorrecto...\n");
                }
            }
        }
    }

    private void createTempFile(byte[] fileBytes, String name, String ruta) {
        try {
            File file = new File(ruta + name);
            BufferedOutputStream bufferedOutput;
            try (FileOutputStream fileOutput = new FileOutputStream(file)) {
                bufferedOutput = new BufferedOutputStream(fileOutput);
                bufferedOutput.write(fileBytes, 0, fileBytes.length);
                bufferedOutput.flush();
            }
            bufferedOutput.close();
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void bannerInicial() {
        pantalla.setText("¬°Bienvenido!\n");
        if (this.usuarioEstablecido == false) {
            pantalla.append("No se ha establecido una sesi√≥n...");
        } else {
            pantalla.append("User ID#" + this.usID + "\n");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Enter;
    private javax.swing.JButton SelectorArchivo;
    private javax.swing.JButton SessionIniter;
    private javax.swing.JButton SubirArchivo;
    private javax.swing.JTextField UserID;
    private javax.swing.JLabel UserPass;
    private javax.swing.JTextField UserPaswd;
    private javax.swing.JTextField comandos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea pantalla;
    private javax.swing.JLabel userID;
    private javax.swing.JTextField visualizadorRuta;
    // End of variables declaration//GEN-END:variables
}
